# Cubagem
cubagem = read.csv("DadosCubagem.csv", header = TRUE, sep = ';', dec = ',')
head(cubagem)

names(cubagem)
cubagem$DSC = cubagem$DCC - 2*cubagem$Esp_casca_cm

cubagem = cubagem[order(cubagem$POSICAO, decreasing = FALSE),]
cubagem = cubagem[order(cubagem$ARVORE, decreasing = FALSE),]
cubagem = cubagem[order(cubagem$ESPACAMENTO, decreasing = FALSE),]
cubagem = cubagem[order(cubagem$MATGEN, decreasing = FALSE),]
cubagem = cubagem[order(cubagem$FAZENDA, decreasing = FALSE),]
row.names(cubagem) = seq(from = 1, to = length(cubagem[,1]), by = 1)

cubagem$COD_ESP = paste(cubagem$FAZENDA, cubagem$MATGEN, cubagem$ESPACAMENTO, sep = "_")
cubagem$COD_ARV = paste(cubagem$FAZENDA, cubagem$MATGEN, cubagem$ESPACAMENTO, cubagem$ARVORE,
                        sep = "_")

library(stringr)
cubagem$COD_ESP = str_replace_all(cubagem$COD_ESP, " ","" )
cubagem$COD_ESP = str_replace_all(cubagem$COD_ESP, ",","." )

cubagem=cubagem[c("COD_ESP","COD_ARV","FAZENDA", "MATGEN","ESPACAMENTO", "ARVORE", "DAP",
                  "HT","POSICAO","DSC","Esp_casca_cm")]

cubagem_orig = cubagem

# Consistência dos dados de cubagem
erro_cubagem = cubagem[cubagem$DAP<0 | cubagem$POSICAO<0 | cubagem$DSC<0,]

for (i in  seq(from=2, to = length(cubagem$FAZENDA), by=1)) {
  if (cubagem$ARVORE[i]==cubagem$ARVORE[i-1]) {
    if ((cubagem$DAP[i]<cubagem$DAP[i-1])|(cubagem$POSICAO[i]<cubagem$POSICAO[i-1])|
        (cubagem$HT[i]!=cubagem$HT[i-1])|(cubagem$DSC[i]>cubagem$DSC[i-1])) {
      erro_cubagem = rbind(erro_cubagem, cubagem[i,])
    }
  }
}

erro_cubagem = cubagem[cubagem$COD_ARV %in%erro_cubagem$COD_ARV,]
erro_cubagem

cubagem = cubagem[!(cubagem$COD_ARV %in% erro_cubagem$COD_ARV),]

row.names(cubagem) = seq(from = 1, to = length(cubagem[,1]), by = 1)
for(i in as.integer(row.names(cubagem))){
  if(i==length(row.names(cubagem))){
    cubagem$VolCC_m3 [i]=0
  }  else {
    if(cubagem[i, "ARVORE"]==cubagem[i+1, "ARVORE"]){
      cubagem$VolCC_m3[i]= ((cubagem[i, "DSC"]^2 + cubagem[i+1,"DSC"]^2)*pi*
                              (cubagem[i+1,"POSICAO"]-cubagem[i,"POSICAO"]))/80000
    } else {
      cubagem$VolCC_m3[i] = 0
    }
  }
}

# Tabela com o volume por árvore e os demais parâmetros necessários para fazer os ajustes das equações
Tab_Vol_Arv = data.frame("COD_ESP"=cubagem$COD_ESP,"COD_ARV"=cubagem$COD_ARV,
                         "MATGEN" = cubagem$MATGEN, "ARVORE"= cubagem$ARVORE, 
                         "DAP" = cubagem$DAP, "HT"= cubagem$HT)

Tab_Vol_Arv = unique(Tab_Vol_Arv)
row.names(Tab_Vol_Arv) = seq(from=1, to=length(Tab_Vol_Arv[,1]), by=1 )

Tab_Vol_Arv$VolArv_m3 = tapply(cubagem$VolCC_m3, cubagem$COD_ARV, sum)[Tab_Vol_Arv$COD_ARV]

Tab_Vol_Arv$inv_DAP=1/Tab_Vol_Arv$DAP

ggplot(
  data = Tab_Vol_Arv,
  aes(x = DAP, y = VolArv_m3))+
  geom_point()+
  theme_classic()+
  xlab("DAP (cm)")+
  ylab("Vol (m3)")

for (i in unique(Tab_Vol_Arv$COD_ESP)) {
  print(ggplot(
    data = Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i,c("DAP","VolArv_m3")],
    aes(x = DAP, y = VolArv_m3))+
    geom_point()+
    theme_classic()+
    ggtitle(i)+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("DAP (cm)")+
    ylab("Vol (m3)"))
}

# Ajuste equações por espaçamento
Tab_Vol_Arv$Vol_Eq1 = c()
Tab_Vol_Arv$Vol_Eq2 = c()
Equacoes_Vol = list()

for(i in unique(Tab_Vol_Arv$COD_ESP)){
  Tabela_Espacamento = Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i, 5:8]
  
  Eq1_vol = lm(log(Tabela_Espacamento$VolArv_m3) ~ log(Tabela_Espacamento$DAP)+
                 log(Tabela_Espacamento$HT))
  
  Eq1_vol
  anova(Eq1_vol)
  summary(Eq1_vol)
  
  Eq2_vol = lm(log(Tabela_Espacamento$VolArv_m3) ~ Tabela_Espacamento$inv_DAP)
  
  Eq2_vol
  anova(Eq2_vol)
  summary(Eq2_vol)
  
  Equacoes_Vol[[i]][["Eq1_vol"]] = Eq1_vol
  Equacoes_Vol[[i]][["Eq2_vol"]] = Eq2_vol
  
  Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i, "Vol_Eq1"] = 
    exp(Equacoes_Vol[[i]][["Eq1_vol"]]$coefficients[1] + 
          Equacoes_Vol[[i]][["Eq1_vol"]]$coefficients[2]*log(Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i,
                                                                     "DAP"])+
          Equacoes_Vol[[i]][["Eq1_vol"]]$coefficients[3]*log(Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i,
                                                                     "HT"]))
  
  Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i, "Vol_Eq2"] = 
    exp(Equacoes_Vol[[i]][["Eq2_vol"]]$coefficients[1] + 
          Equacoes_Vol[[i]][["Eq2_vol"]]$coefficients[2]*Tab_Vol_Arv[Tab_Vol_Arv$COD_ESP == i,
                                                                 "inv_DAP"])
}

# Cálculo dos resíduos
TabResVol = data.frame("COD_ESP" = Tab_Vol_Arv$COD_ESP, "Arvore"=Tab_Vol_Arv$ARVORE, "Vol_Obs"=Tab_Vol_Arv$VolArv_m3, 
                       "Vol_Eq1" = Tab_Vol_Arv$Vol_Eq1, 
                       "Vol_Eq2" = Tab_Vol_Arv$Vol_Eq2)
TabResVol$Erro_Vol_Eq1 = (TabResVol$Vol_Obs - TabResVol$Vol_Eq1)/TabResVol$Vol_Obs
TabResVol$Erro_Vol_Eq2 = (TabResVol$Vol_Obs - TabResVol$Vol_Eq2)/TabResVol$Vol_Obs

# Análise gráica dos resíduos da população
library(ggplot2)
library(grid)

viewport = viewport(
  layout = grid.layout(2,1)
)

grid.newpage()
pushViewport(viewport)

ResiduoEq_vol1 = ggplot(
  data = TabResVol,
  aes(x = Vol_Obs, y = Erro_Vol_Eq1))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("Gráfico de Resíduo")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("")+
  ylab("Resíduo")+
  ylim(c(min(TabResVol$Erro_Vol_Eq1,TabResVol$Erro_Vol_Eq2),
         max(TabResVol$Erro_Vol_Eq1,TabResVol$Erro_Vol_Eq2)))+
  geom_hline(yintercept=0, lwd = 0.1, col='Black')

print(
  x = ResiduoEq_vol1,
  vp = viewport(
    layout.pos.row = 1,
    layout.pos.col = 1))

ResiduoEq_vol2 = ggplot(
  data = TabResVol,
  aes(x = Vol_Obs, y = Erro_Vol_Eq2))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Volume Observado (m3)")+
  ylab("Resíduo")+
  ylim(c(min(TabResVol$Erro_Vol_Eq1,TabResVol$Erro_Vol_Eq2),
         max(TabResVol$Erro_Vol_Eq1,TabResVol$Erro_Vol_Eq2)))+
  geom_hline(yintercept=0, lwd = 0.1, col='Black')

print(
  x = ResiduoEq_vol2,
  vp = viewport(
    layout.pos.row = 2,
    layout.pos.col = 1))


# Análise gráfica HT observado x HT estimado
viewport = viewport(
  layout = grid.layout(2,1)
)

grid.newpage()
pushViewport(viewport)

PrecEq_vol1 = ggplot(
  data = TabResVol,
  aes(x = Vol_Eq1, y = Vol_Obs))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("Gráfico de Resíduo")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Volume Estimado Eq. 1")+
  ylab("Volume Observado")+
  xlim(c(min(TabResVol$Vol_Eq1,TabResVol$Vol_Eq2),
         max(TabResVol$Vol_Eq1,TabResVol$Vol_Eq2)))+
  geom_abline(alpha = 0.5, lwd = 0.1, col='Black')

print(
  x = PrecEq_vol1,
  vp = viewport(
    layout.pos.row = 1,
    layout.pos.col = 1))

PrecEq_vol2 = ggplot(
  data = TabResVol,
  aes(x = Vol_Eq2, y = Vol_Obs))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Volume Estimado Eq. 2")+
  ylab("Volume Observado")+
  xlim(c(min(TabResVol$Vol_Eq1,TabResVol$Vol_Eq2),
         max(TabResVol$Vol_Eq1,TabResVol$Vol_Eq2)))+
  geom_abline(alpha = 0.5, lwd = 0.1, col='Black')

print(
  x = PrecEq_vol2,
  vp = viewport(
    layout.pos.row = 2,
    layout.pos.col = 1))


# Análise gráfica dos resíduos por espaçamento
for (i in unique(TabResVol$COD_ESP)) {
  Aux_Residuo = TabResVol[TabResVol$COD_ESP == i , ]
  viewport = viewport(
    layout = grid.layout(2,1)
  )
  
  grid.newpage()
  pushViewport(viewport)
  
  ResiduoEq_vol1 = ggplot(
    data = Aux_Residuo,
    aes(x = Vol_Obs, y = Erro_Vol_Eq1))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle(paste("Gráfico de Resíduo", i, sep=" "))+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("")+
    ylab("Resíduo")+
    ylim(c(min(Aux_Residuo$Erro_Vol_Eq1,Aux_Residuo$Erro_Vol_Eq2),
           max(Aux_Residuo$Erro_Vol_Eq1,Aux_Residuo$Erro_Vol_Eq2)))+
    geom_hline(yintercept=0, lwd = 0.1, col='Black')
  
  print(
    x = ResiduoEq_vol1,
    vp = viewport(
      layout.pos.row = 1,
      layout.pos.col = 1))
  
  ResiduoEq_vol2 = ggplot(
    data = Aux_Residuo,
    aes(x = Vol_Obs, y = Erro_Vol_Eq2))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle("")+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("Volume Observado (m3)")+
    ylab("Resíduo")+
    ylim(c(min(Aux_Residuo$Erro_Vol_Eq1,Aux_Residuo$Erro_Vol_Eq2),
           max(Aux_Residuo$Erro_Vol_Eq1,Aux_Residuo$Erro_Vol_Eq2)))+
    geom_hline(yintercept=0, lwd = 0.1, col='Black')
  
  print(
    x = ResiduoEq_vol2,
    vp = viewport(
      layout.pos.row = 2,
      layout.pos.col = 1))
  

  # Análise gráfica HT observado x HT estimado
  viewport = viewport(
    layout = grid.layout(2,1)
  )
  
  grid.newpage()
  pushViewport(viewport)
  
  PrecEq_vol1 = ggplot(
    data = Aux_Residuo,
    aes(x = Vol_Eq1, y = Vol_Obs))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle(paste("Gráfico de Resíduo", i, sep=" "))+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("Volume Estimado Eq. 1")+
    ylab("Volume Observado")+
    xlim(c(min(Aux_Residuo$Vol_Eq1,Aux_Residuo$Vol_Eq2),
           max(Aux_Residuo$Vol_Eq1,Aux_Residuo$Vol_Eq2)))+
    geom_abline(alpha = 0.5, lwd = 0.1, col='Black')
  
  print(
    x = PrecEq_vol1,
    vp = viewport(
      layout.pos.row = 1,
      layout.pos.col = 1))
  
  PrecEq_vol2 = ggplot(
    data = Aux_Residuo,
    aes(x = Vol_Eq2, y = Vol_Obs))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle("")+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("Volume Estimado Eq. 2")+
    ylab("Volume Observado")+
    xlim(c(min(Aux_Residuo$Vol_Eq1,Aux_Residuo$Vol_Eq2),
           max(Aux_Residuo$Vol_Eq1,Aux_Residuo$Vol_Eq2)))+
    geom_abline(alpha = 0.5, lwd = 0.1, col='Black')
  
  print(
    x = PrecEq_vol2,
    vp = viewport(
      layout.pos.row = 2,
      layout.pos.col = 1))
}
