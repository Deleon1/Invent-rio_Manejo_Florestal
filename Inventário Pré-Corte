# Inventário HT Florestal
inventario = read.csv("Dados_Inventario.csv", header = TRUE, sep = ';', dec = ',')
names(inventario)
head(inventario)

inventario$DAP = inventario$CAP/pi

names(inventario)[1] = "MG"
names(inventario)[2] = "ESPAC"
inventario$Fazenda = "Itamarandiba"
inventario$Projeto = "Celulose" 

inventario = inventario[,c("Fazenda", "Projeto", "TALHAO", "MG", "AREA_TALHAO", "DATA_PLANTIO", "ESPAC", "PARCELA",
                           "DATA_MEDICAO", "AREA_PARCELA", "COVA", "FUSTE", "DAP", "HT", "OBS")]

inventario = inventario[order(inventario$OBS, decreasing = FALSE),]
inventario = inventario[order(inventario$COVA, decreasing = FALSE),]
inventario = inventario[order(inventario$PARCELA, decreasing = FALSE),]
inventario = inventario[order(inventario$TALHAO, decreasing = FALSE),]
inventario = inventario[order(inventario$ESPAC, decreasing = FALSE),]
inventario = inventario[order(inventario$MG, decreasing = FALSE),]
inventario = inventario[order(inventario$Projeto, decreasing = FALSE),]
inventario = inventario[order(inventario$Fazenda, decreasing = FALSE),]
row.names(inventario) = seq(from = 1, to = length(inventario[,1]), by = 1)

# Consistência dos dados de inventário
Covas_descartadas = inventario[inventario$DAP<=0|inventario$HT<0,]
Covas_descartadas = rbind(Covas_descartadas, inventario[inventario$OBS == "M" | inventario$OBS == "F" , ])
Covas_descartadas = unique(Covas_descartadas)
length(Covas_descartadas[,1])

inventario = inventario[-as.integer(row.names(Covas_descartadas)),]
row.names(inventario) = seq(from = 1, to = length(inventario[,1]), by = 1)

inventario$COD_TALHAO = paste(inventario$Fazenda, inventario$MG,
                              inventario$ESPAC, inventario$TALHAO, sep = "_")

inventario$COD_ESP = paste(inventario$Fazenda, inventario$MG,
                           inventario$ESPAC, sep = "_")

library(stringr)
inventario$COD_ESP = str_replace_all(inventario$COD_ESP, " ","" )
inventario$COD_ESP = str_replace_all(inventario$COD_ESP, ",","." )

inventario$HD = c()

for (i in unique(inventario$COD_TALHAO)) {
  aux_talhao = inventario[inventario$COD_TALHAO==i,]
  for (j in unique(aux_talhao$PARCELA)) {
    aux_HD = mean(aux_talhao[(aux_talhao$PARCELA == j) & (aux_talhao$OBS == "D"), "HT"])
    inventario[inventario$COD_TALHAO == i & inventario$PARCELA == j,"HD"] = aux_HD
  }
}

Tab_Ht = inventario[inventario$DAP>0 & inventario$HT>0,]

Tab_Ht = data.frame("COD_TALHAO" = Tab_Ht$COD_TALHAO, "COD_ESP" = Tab_Ht$COD_ESP,
                    "Fazenda" = Tab_Ht$Fazenda, "Talhao" = Tab_Ht$TALHAO, "MG" = Tab_Ht$MG,
                    "Parcela"=Tab_Ht$PARCELA, "Cova" = Tab_Ht$COVA, "DAP" = Tab_Ht$DAP, "HT" = Tab_Ht$HT,
                    "HD" = Tab_Ht$HD)

library(ggplot2)
ggplot(
  data = Tab_Ht,
  aes(x = DAP, y = HT))+
  geom_point()+
  theme_classic()+
  xlab("DAP(cm)")+
  ylab("HT(m)")+
  geom_smooth(method = "lm", se = FALSE)


for (i in unique(Tab_Ht$COD_ESP)) {
  print(ggplot(
    data = Tab_Ht[Tab_Ht$COD_ESP == i, c("DAP","HT")],
    aes(x = DAP, y = HT))+
      geom_point()+
      theme_classic()+
      ggtitle(i)+
      theme(plot.title = element_text(hjust = 0.5))+
      xlab("DAP(cm)")+
      ylab("HT(m)")+
      geom_smooth(method = "lm", se = FALSE))
}

Tab_Ht$invDAP = 1/Tab_Ht$DAP

# Ajuste equações hipsométricas por espaçamento
Tab_Ht$HT_Eq1 = c()
Tab_Ht$HT_Eq2 = c()
Equacoes_HT = list()

for(i in unique(Tab_Ht$COD_ESP)){
  Tabela_Espacamento_HT = Tab_Ht[Tab_Ht$COD_ESP == i, c("HT", "HD", "invDAP")]
  
  ht_eq1 = lm(log(Tabela_Espacamento_HT$HT) ~ Tabela_Espacamento_HT$invDAP)
  ht_eq1
  summary(ht_eq1)
  
  ht_eq2 = lm(log(Tabela_Espacamento_HT$HT) ~ Tabela_Espacamento_HT$invDAP + 
                log(Tabela_Espacamento_HT$HD))
  ht_eq2
  summary(ht_eq2)
  
  Equacoes_HT[[i]][["Eq1_HT"]] = ht_eq1
  Equacoes_HT[[i]][["Eq2_HT"]] = ht_eq2
  
  Tab_Ht[Tab_Ht$COD_ESP == i, "HT_Eq1"] = 
    exp(Equacoes_HT[[i]][["Eq1_HT"]]$coefficients[1] + 
          Equacoes_HT[[i]][["Eq1_HT"]]$coefficients[2]*Tab_Ht[Tab_Ht$COD_ESP == i,
                                                              "invDAP"])
  
  Tab_Ht[Tab_Ht$COD_ESP == i, "HT_Eq2"] = 
    exp(Equacoes_HT[[i]][["Eq2_HT"]]$coefficients[1] + 
          Equacoes_HT[[i]][["Eq2_HT"]]$coefficients[2]*Tab_Ht[Tab_Ht$COD_ESP == i,"invDAP"]+
          Equacoes_HT[[i]][["Eq2_HT"]]$coefficients[3]*log(Tab_Ht[Tab_Ht$COD_ESP == i,
                                                                  "HD"]))
}

TabResHt = data.frame("COD_ESP" = Tab_Ht$COD_ESP,
                      "HT" = Tab_Ht$HT,
                      "HT_eq1" = Tab_Ht$HT_Eq1,
                      "HT_eq2" = Tab_Ht$HT_Eq2,
                      "Erro_HT_Eq1" = (Tab_Ht$HT - Tab_Ht$HT_Eq1)/Tab_Ht$HT,
                      "Erro_HT_Eq2" = (Tab_Ht$HT - Tab_Ht$HT_Eq2)/Tab_Ht$HT)

# Análise gráfica dos resíduos para a população
library(grid)
viewport = viewport(
  layout = grid.layout(2,1)
)

grid.newpage()
pushViewport(viewport)

ResiduoEq_vol1 = ggplot(
  data = TabResHt,
  aes(x = HT, y = Erro_HT_Eq1))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("Gráfico de Resíduo")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("")+
  ylab("Resíduo")+
  ylim(c(min(TabResHt$Erro_HT_Eq1,TabResHt$Erro_HT_Eq2),
         max(TabResHt$Erro_HT_Eq1,TabResHt$Erro_HT_Eq2)))+
  geom_hline(yintercept=0, lwd = 0.1, col='Black')

print(
  x = ResiduoEq_vol1,
  vp = viewport(
    layout.pos.row = 1,
    layout.pos.col = 1))

ResiduoEq_vol2 = ggplot(
  data = TabResHt,
  aes(x = HT, y = Erro_HT_Eq2))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Altura Observada (m)")+
  ylab("Resíduo")+
  ylim(c(min(TabResHt$Erro_HT_Eq1,TabResHt$Erro_HT_Eq2),
         max(TabResHt$Erro_HT_Eq1,TabResHt$Erro_HT_Eq2)))+
  geom_hline(yintercept=0, lwd = 0.1, col='Black')

print(
  x = ResiduoEq_vol2,
  vp = viewport(
    layout.pos.row = 2,
    layout.pos.col = 1))

# Análise gráfica Ht observado x Ht estimado
viewport = viewport(
  layout = grid.layout(2,1)
)

grid.newpage()
pushViewport(viewport)

PrecEq_vol1 = ggplot(
  data = TabResHt,
  aes(x = HT_eq1, y = HT))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("Gráfico de Resíduo")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Altura Estimada Eq. 1")+
  ylab("Altura Observada")+
  xlim(c(min(TabResHt$HT_eq1,TabResHt$HT_eq2),
         max(TabResHt$HT_eq1,TabResHt$HT_eq2)))+
  geom_abline(alpha = 0.5, lwd = 0.1, col='Black')

print(
  x = PrecEq_vol1,
  vp = viewport(
    layout.pos.row = 1,
    layout.pos.col = 1))

PrecEq_vol2 = ggplot(
  data = TabResHt,
  aes(x = HT_eq2, y = HT))+
  geom_point(lwd=0.5)+
  theme_classic()+
  ggtitle("")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Altura Estimada Eq. 2")+
  ylab("Altura Observada")+
  xlim(c(min(TabResHt$HT_eq1,TabResHt$HT_eq2),
         max(TabResHt$HT_eq1,TabResHt$HT_eq2)))+
  geom_abline(alpha = 0.5, lwd = 0.1, col='Black')

print(
  x = PrecEq_vol2,
  vp = viewport(
    layout.pos.row = 2,
    layout.pos.col = 1))


# Análise gráfica resíduos por espaçamento
for (i in unique(TabResHt$COD_ESP)) {
  Aux_Residuo_Ht = TabResHt[TabResHt$COD_ESP == i , ]
  viewport = viewport(
    layout = grid.layout(2,1)
  )
  
  grid.newpage()
  pushViewport(viewport)
  
  ResiduoEq_vol1 = ggplot(
    data = Aux_Residuo_Ht,
    aes(x = HT, y = Erro_HT_Eq1))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle(paste("Gráfico de Resíduo", i, sep=" "))+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("")+
    ylab("Resíduo")+
    ylim(c(min(Aux_Residuo_Ht$Erro_HT_Eq1,Aux_Residuo_Ht$Erro_HT_Eq2),
           max(Aux_Residuo_Ht$Erro_HT_Eq1,Aux_Residuo_Ht$Erro_HT_Eq2)))+
    geom_hline(yintercept=0, lwd = 0.1, col='Black')
  
  print(
    x = ResiduoEq_vol1,
    vp = viewport(
      layout.pos.row = 1,
      layout.pos.col = 1))
  
  ResiduoEq_vol2 = ggplot(
    data = Aux_Residuo_Ht,
    aes(x = HT, y = Erro_HT_Eq2))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle("")+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("Altura Observada (m)")+
    ylab("Resíduo")+
    ylim(c(min(Aux_Residuo_Ht$Erro_HT_Eq1,Aux_Residuo_Ht$Erro_HT_Eq2),
           max(Aux_Residuo_Ht$Erro_HT_Eq1,Aux_Residuo_Ht$Erro_HT_Eq2)))+
    geom_hline(yintercept=0, lwd = 0.1, col='Black')
  
  print(
    x = ResiduoEq_vol2,
    vp = viewport(
      layout.pos.row = 2,
      layout.pos.col = 1))
  
  # Análise gráfica Ht observado x Ht estimado
  viewport = viewport(
    layout = grid.layout(2,1)
  )
  
  grid.newpage()
  pushViewport(viewport)
  
  PrecEq_vol1 = ggplot(
    data = Aux_Residuo_Ht,
    aes(x = HT_eq1, y = HT))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle(paste("Gráfico de Resíduo", i, sep=" "))+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("Altura Estimada Eq. 1")+
    ylab("Altura Observada")+
    xlim(c(min(Aux_Residuo_Ht$HT_eq1,Aux_Residuo_Ht$HT_eq2),
           max(Aux_Residuo_Ht$HT_eq1,Aux_Residuo_Ht$HT_eq2)))+
    geom_abline(alpha = 0.5, lwd = 0.1, col='Black')
  
  print(
    x = PrecEq_vol1,
    vp = viewport(
      layout.pos.row = 1,
      layout.pos.col = 1))
  
  PrecEq_vol2 = ggplot(
    data = Aux_Residuo_Ht,
    aes(x = HT_eq2, y = HT))+
    geom_point(lwd=0.5)+
    theme_classic()+
    ggtitle("")+
    theme(plot.title = element_text(hjust = 0.5))+
    xlab("Altura Estimada Eq. 2")+
    ylab("Altura Observada")+
    xlim(c(min(Aux_Residuo_Ht$HT_eq1,Aux_Residuo_Ht$HT_eq2),
           max(Aux_Residuo_Ht$HT_eq1,Aux_Residuo_Ht$HT_eq2)))+
    geom_abline(alpha = 0.5, lwd = 0.1, col='Black')
  
  print(
    x = PrecEq_vol2,
    vp = viewport(
      layout.pos.row = 2,
      layout.pos.col = 1))
}

# Cálculo da altura por fuste
inventario$Ht_Est = c()

for(i in unique(inventario$COD_ESP)){
  
  inventario[inventario$COD_ESP == i, "Ht_Est"] = 
    exp(Equacoes_HT[[i]][["Eq2_HT"]]$coefficients[1] + 
          Equacoes_HT[[i]][["Eq2_HT"]]$coefficients[2] / 
          inventario[inventario$COD_ESP == i,"DAP"]+
          Equacoes_HT[[i]][["Eq2_HT"]]$coefficients[3] * 
          log(inventario[inventario$COD_ESP == i, "HD"]))
}

ht_final = function(x){
  if (x[1] > 0 ) {
    y = x[1]
  } else {
    y = x[2]
  }
}

inventario$HT_Final = apply(inventario[,c("HT", "Ht_Est")],1,FUN = ht_final) 

# Cálculo do volume por fuste
inventario$Vol_Fuste = c()

for(i in unique(inventario$COD_ESP)){
  
  inventario[inventario$COD_ESP == i, "Vol_Fuste"] =
    exp(Equacoes_Vol[[i]][["Eq1_vol"]]$coefficients[1] + 
          Equacoes_Vol[[i]][["Eq1_vol"]]$coefficients[2]*log(inventario[inventario$COD_ESP == i,
                                                                        "DAP"])+
          Equacoes_Vol[[i]][["Eq1_vol"]]$coefficients[3]*log(inventario[inventario$COD_ESP == i,
                                                                        "HT_Final"]))
}

# Cálculo do volume por parcela (m3/ha) e por talhão (m3)
Inventario_Parcela = inventario[,c("COD_ESP","COD_TALHAO","AREA_TALHAO", "PARCELA","AREA_PARCELA")]
Inventario_Parcela = unique(Inventario_Parcela)
Inventario_Parcela$Vol_parc = c()

for (i in unique(inventario$COD_TALHAO)) {
  aux_parcela = inventario[inventario$COD_TALHAO == i, c("PARCELA","Vol_Fuste")]
  Inventario_Parcela[Inventario_Parcela$COD_TALHAO == i, "Vol_parc"] = 
    tapply(aux_parcela$Vol_Fuste, aux_parcela$PARCELA, sum)
}

Inventario_Parcela$Vol_Parc_ha = Inventario_Parcela$Vol_parc/
  (Inventario_Parcela$AREA_PARCELA/10000)

Inventario_Parcela$Vol_Talhao_m3 = c()

for (i in unique(Inventario_Parcela$COD_TALHAO)) {
  Inventario_Parcela[Inventario_Parcela$COD_TALHAO == i, "Vol_Talhao_m3"] = 
    mean(Inventario_Parcela[Inventario_Parcela$COD_TALHAO == i, "Vol_Parc_ha"]) *
    unique(Inventario_Parcela[Inventario_Parcela$COD_TALHAO == i, "AREA_TALHAO"])
}

# Cálculo do erro de amostragem 
Tab_Area  = unique(Inventario_Parcela[,c("COD_ESP","AREA_TALHAO")])
Tab_Area
Tab_Area = data.frame("COD_ESP" = unique(Tab_Area$COD_ESP), 
                      "Area_Talhao" =  tapply(Tab_Area$AREA_TALHAO, Tab_Area$COD_ESP, sum))
Tab_Area
row.names(Tab_Area) = seq(from = 1, to = length(Tab_Area[,1]), by = 1)

Tab_Estratos = data.frame("Estrato" = unique(Inventario_Parcela$COD_ESP),
                             "nj" = tapply(Inventario_Parcela$Vol_Parc_ha , 
                                           Inventario_Parcela$COD_ESP, length)[unique(
                                             Inventario_Parcela$COD_ESP)],
                             "E_Nj" = Tab_Area$Area_Talhao*10000/ tapply(Inventario_Parcela$AREA_PARCELA, 
                                                                  Inventario_Parcela$COD_ESP, mean)[unique(Inventario_Parcela$COD_ESP)], 
                             "Yij" = tapply(Inventario_Parcela$Vol_Parc_ha , 
                                            Inventario_Parcela$COD_ESP, sum)[unique(
                                              Inventario_Parcela$COD_ESP)],
                             "Pj" = Tab_Area$Area_Talhao/sum(Tab_Area$Area_Talhao),
                             "E_Y2ij" = tapply(Inventario_Parcela$Vol_Parc_ha , 
                                               Inventario_Parcela$COD_ESP, FUN = function(x){
                                                 sum(x^2)})[unique(Inventario_Parcela$COD_ESP)],
                             "M_Yj" = tapply(Inventario_Parcela$Vol_Parc_ha , 
                                             Inventario_Parcela$COD_ESP, mean)[unique(
                                               Inventario_Parcela$COD_ESP)],
                             "S2j" = tapply(Inventario_Parcela$Vol_Parc_ha , 
                                            Inventario_Parcela$COD_ESP, var)[unique(
                                              Inventario_Parcela$COD_ESP)],
                             "Sj" = tapply(Inventario_Parcela$Vol_Parc_ha , 
                                           Inventario_Parcela$COD_ESP, sd)[unique(
                                             Inventario_Parcela$COD_ESP)]) 

row.names(Tab_Estratos) = seq(from = 1, to = length(Tab_Estratos[,1]), by = 1)

Tab_Estratos$PjSj = Tab_Estratos$Pj * Tab_Estratos$Sj

Tab_Estratos$PjS2j = Tab_Estratos$Pj * Tab_Estratos$S2j

Tab_Estratos$PjM_Yj = Tab_Estratos$Pj * Tab_Estratos$M_Yj

S2M_Y = (sum(Tab_Estratos$PjSj)^2)/sum(Tab_Estratos$nj) - 
  sum(Tab_Estratos$PjS2j)/sum(Tab_Estratos$E_Nj)

S2M_Y

S.M_Y = sqrt(S2M_Y)
S.M_Y

S2P_Y = sum(Tab_Estratos$E_Nj)^2 * S2M_Y
S2P_Y

S.P_Y = sqrt(S2P_Y)
S.P_Y

Erro_Amostragem = S.M_Y * qt(0.975, df = (sum(Tab_Estratos$nj - 1)))
Erro_Amostragem

Erro_Amostragem_perc = 100 * Erro_Amostragem / sum(Tab_Estratos$PjM_Yj)
Erro_Amostragem_perc

LI = sum(Tab_Estratos$PjM_Yj) * sum(Tab_Estratos$E_Nj) - S.P_Y *
  qt(0.975, df = (sum(Tab_Estratos$nj - 1)))

LI

LS = sum(Tab_Estratos$PjM_Yj) * sum(Tab_Estratos$E_Nj) + S.P_Y *
  qt(0.975, df = (sum(Tab_Estratos$nj - 1)))

LS
